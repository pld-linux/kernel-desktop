diff -Nur linux-2.6.15.6/drivers/input/joystick/iforce/iforce-main.c linux-2.6.15.6.iforce/drivers/input/joystick/iforce/iforce-main.c
--- linux-2.6.15.6/drivers/input/joystick/iforce/iforce-main.c	2006-03-05 19:07:54.000000000 +0000
+++ linux-2.6.15.6.iforce/drivers/input/joystick/iforce/iforce-main.c	2006-04-30 00:45:51.000000000 +0000
@@ -79,6 +79,7 @@
 	{ 0x06f8, 0x0001, "Guillemot Race Leader Force Feedback",	btn_wheel, abs_wheel, ff_iforce }, //?
 	{ 0x06f8, 0x0004, "Guillemot Force Feedback Racing Wheel",	btn_wheel, abs_wheel, ff_iforce }, //?
 	{ 0x06f8, 0x0004, "Gullemot Jet Leader 3D",			btn_joystick, abs_joystick, ff_iforce }, //?
+	{ 0x06d6, 0x29bc, "Trust Force Feedback Race Master",		btn_wheel, abs_wheel, ff_iforce },
 	{ 0x0000, 0x0000, "Unknown I-Force Device [%04x:%04x]",		btn_joystick, abs_joystick, ff_iforce }
 };
 
diff -Nur linux-2.6.15.6/drivers/input/joystick/iforce/iforce-serio.c linux-2.6.15.6.iforce/drivers/input/joystick/iforce/iforce-serio.c
--- linux-2.6.15.6/drivers/input/joystick/iforce/iforce-serio.c	2006-03-05 19:07:54.000000000 +0000
+++ linux-2.6.15.6.iforce/drivers/input/joystick/iforce/iforce-serio.c	2006-04-29 23:17:59.000000000 +0000
@@ -175,6 +175,12 @@
 		.id	= SERIO_ANY,
 		.extra	= SERIO_ANY,
 	},
+	{
+		.type	= SERIO_RS232,
+		.proto	= 0x1f, // Trust ForceFeedback Race Master
+		.id	= SERIO_ANY,
+		.extra	= SERIO_ANY,
+	},
 	{ 0 }
 };
 
--- linux-2.6.17/include/linux/skbuff.h~	2006-06-19 16:14:43.000000000 +0200
+++ linux-2.6.17/include/linux/skbuff.h	2006-06-19 16:57:47.000000000 +0200
@@ -19,6 +19,7 @@
 #include <linux/compiler.h>
 #include <linux/time.h>
 #include <linux/cache.h>
+#include <linux/ip.h>
 
 #include <asm/atomic.h>
 #include <asm/types.h>
--- linux-2.6.17/mm/slab.c~	2006-06-19 17:12:13.000000000 +0000
+++ linux-2.6.17/mm/slab.c	2006-06-19 17:11:25.000000000 +0000
@@ -3243,14 +3243,14 @@
 				if (unlikely(alien->avail == alien->limit)) {
 					STATS_INC_ACOVERFLOW(cachep);
 					__drain_alien_cache(cachep,
-							    alien, nodeid);
+							    alien, nodeid, this_cpu);
 				}
 				alien->entry[alien->avail++] = objp;
 				spin_unlock(&alien->lock);
 			} else {
 				spin_lock(&(cachep->nodelists[nodeid])->
 					  list_lock);
-				free_block(cachep, &objp, 1, nodeid);
+				free_block(cachep, &objp, 1, nodeid, this_cpu);
 				spin_unlock(&(cachep->nodelists[nodeid])->
 					    list_lock);
 			}
--- linux-2.6.17/drivers/char/hangcheck-timer.c~	2006-06-19 22:03:01.000000000 +0200
+++ linux-2.6.17/drivers/char/hangcheck-timer.c	2006-06-19 22:02:21.000000000 +0200
@@ -118,7 +118,9 @@
 #endif /* not MODULE */
 
 #if defined(CONFIG_X86_64) || defined(CONFIG_S390)
-# define HAVE_MONOTONIC
+# if defined(CONFIG_S390)
+#  define HAVE_MONOTONIC
+# endif
 # define TIMER_FREQ 1000000000ULL
 #elif defined(CONFIG_IA64)
 # define TIMER_FREQ ((unsigned long long)local_cpu_data->itc_freq)
